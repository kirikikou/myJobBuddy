const cfg=require(process.cwd()+'/config');
const http=require('http');const https=require('https');const origReq={http:http.request,https:https.request};const stamp=()=>new Date().toISOString();const ms=t=>Math.round(Number(process.hrtime.bigint()-t)/1e6);const wrap=(proto,name)=>function(...args){const s=process.hrtime.bigint();try{const res=proto.apply(this,args);cfg.smartLog('buffer',`listen:start:${stamp()}`);res.on('listening',()=>cfg.smartLog('buffer',`listen:ok:${stamp()}`));res.on('error',e=>cfg.smartLog('fail',`listen:error:${e.code||'UNKNOWN'}:${e.message}`));return res}catch(e){cfg.smartLog('fail',`listen:throw:${e.message}`);throw e}};http.Server.prototype.listen=wrap(http.Server.prototype.listen,'listen');const mk=(orig,proto)=>function(...args){let opts=typeof args[0]==='string'?new URL(args[0]):(args[0]||{});const method=(opts.method||'GET').toUpperCase();const host=opts.hostname||opts.host||opts.headers?.host||'localhost';const port=opts.port||proto===https?443:80;const path=opts.path||'/';const url=`${proto}://${host}:${port}${path}`;const t=process.hrtime.bigint();const req=orig.apply(this,args);req.setTimeout(5000,()=>{cfg.smartLog('fail',`http:timeout:${method}:${url}:${ms(t)}ms`);try{req.destroy(new Error('timeout'))}catch{}});req.on('socket',()=>cfg.smartLog('buffer',`http:open:${method}:${url}`));req.on('response',r=>cfg.smartLog(r.statusCode>=400?'fail':'buffer',`http:resp:${method}:${url}:${r.statusCode}:${ms(t)}ms`));req.on('error',e=>cfg.smartLog('fail',`http:error:${method}:${url}:${e.code||'ERR'}:${ms(t)}ms`));return req};http.request=mk(origReq.http,'http');https.request=mk(origReq.https,'https');
